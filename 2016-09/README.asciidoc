Meetup #11, September 14th 2016
===============================
Am Laher, Evan Shaw, Xing Xing, Malcom Lockyer


Sign up at meetup.com: http://www.meetup.com/Go-AKL/events/232840231/

Great news: firstly we have 2 great talks prepared for this session - from Evan Shaw and Xing Xing. Thanks guys!

Secondly, we are upping our game and getting more organised. Announcements to follow at the meetup itself.


Agenda
------

 * 6:30 - 7:00 Meet and Greet. Enjoy drinks and pizza.

 * 7:00 - 7:15 - Announcements. link:https://github.com/laher[Am Laher]

 ** Thank You! link:hapara.com[Hapara] for hosting, beer & pizza. Speakers, volunteers and gophers

 ** Where are the bathrooms

 ** link:GoAKL-news.asciidoc[GoAKL news and plans]

 ** Job Openings / Hiring Announcements (if any)

 ** Announce next meetup

 * 7:15 - 7:45 - talk #1, link:https://github.com/edsrzf[Evan Shaw], 'Single Static Assignment'

 * 7:50 - 8:20 - talk #2, link:https://github.com/mikespook[Xing Xing], 'link:https://github.com/GoAKL/GoAKL/tree/master/2016-09/Flame%20Graph%20for%20Golang[Flame Graphs]'

 * 8:25 - 8:35 - Go News. Go1.7, yay!  link:https://github.com/segfault88[Malcolm Lockyer]

 * 8:35 - 8:45 - Thanks, wrap up, engage volunteers.


Go News
------
 * link:https://www.kickstarter.com/projects/1604791210/go-gopher-toy[Real Gopher!] Kickstarter project
 * Dave Cheney - SOLID Go Design link:https://www.youtube.com/watch?v=zzAdEt3xZ1M[Video from Golang UK]
 * Paul Bellamy - Advanced Patterns with io ReadWriter link:https://www.youtube.com/watch?v=kTAsciVuZLQ[Video from Golang UK]
 * link:https://github.com/tmrts/go-patterns[go-patterns] Maybe a little bit heavy but interesting to see Go versions of a bunch of well known Java type patterns.
 * link:http://golang.rakyll.org/grpc-streaming/[Bidirectional gRPC streaming for Go] - What is GRPC? http://www.grpc.io/
 * Not news, but awesome: link:https://github.com/davecgh/go-spew[go-spew implements a deep pretty printer for Go data structures to aid in debugging]. Instead of just printing pointer addresses with fmt.Printf and "%#" - actually follows structure and prints out nested data.

```go
(main.Foo) {
 unexportedField: (*main.Bar)(0xf84002e210)({
  flag: (main.Flag) flagTwo,
  data: (uintptr) <nil>
 }),
 ExportedField: (map[interface {}]interface {}) {
  (string) "one": (bool) true
 }
}
([]uint8) {
 00000000  11 12 13 14 15 16 17 18  19 1a 1b 1c 1d 1e 1f 20  |............... |
 00000010  21 22 23 24 25 26 27 28  29 2a 2b 2c 2d 2e 2f 30  |!"#$%&'()*+,-./0|
 00000020  31 32                                             |12|
}
```
